name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Start Docker services
      run: |
        docker compose up -d

        # Wait for critical services to be ready
        echo "Waiting for services to be ready..."

        # MinIO (required for S3 tests)
        timeout 90 bash -c 'until curl -f http://localhost:9000/minio/health/live 2>/dev/null; do echo "Waiting for MinIO..."; sleep 2; done'
        echo "✓ MinIO ready"

        # Azurite (optional - Azure tests)
        timeout 30 bash -c 'until nc -z localhost 10000 2>/dev/null; do echo "Waiting for Azurite..."; sleep 2; done' || echo "⚠ Azurite not ready (tests will skip)"

        # fake-gcs-server (optional - GCS tests)
        timeout 30 bash -c 'until curl -f http://localhost:4443/storage/v1/b 2>/dev/null; do echo "Waiting for fake-gcs-server..."; sleep 2; done' || echo "⚠ fake-gcs-server not ready (tests will skip)"

        # SFTP (optional - SFTP tests)
        timeout 30 bash -c 'until nc -z localhost 2222 2>/dev/null; do echo "Waiting for SFTP..."; sleep 2; done' || echo "⚠ SFTP not ready (tests will skip)"

        # SMB (optional - SMB tests)
        timeout 30 bash -c 'until nc -z localhost 445 2>/dev/null; do echo "Waiting for SMB..."; sleep 2; done' || echo "⚠ SMB not ready (tests will skip)"

        # WebDAV (optional - WebDAV tests)
        timeout 30 bash -c 'until curl -f http://localhost:8080 2>/dev/null; do echo "Waiting for WebDAV..."; sleep 2; done' || echo "⚠ WebDAV not ready (tests will skip)"

        echo "Service startup complete!"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all,dev]"
    
    - name: Run all tests
      env:
        MINIO_ENDPOINT: http://localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
        STORAGE_EMULATOR_HOST: http://localhost:4443
      run: |
        pytest -v --cov=genro_storage --cov-report=xml --cov-report=term
    
    - name: Stop Docker services
      if: always()
      run: |
        docker compose down -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Generate coverage report
      if: matrix.python-version == '3.12'
      run: |
        pip install coverage[toml]
        coverage report --show-missing
        coverage html
    
    - name: Upload coverage HTML
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v5
      with:
        name: coverage-html
        path: htmlcov/
        retention-days: 30

    # Coverage badge is handled by Codecov automatically
    # No need to generate and commit a local badge file

  lint:
    name: Lint and format check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
        pip install -e ".[all]"
    
    - name: Check code formatting with black
      run: |
        black --check --diff genro_storage tests
      continue-on-error: true  # Don't fail CI on formatting for now
    
    - name: Lint with ruff
      run: |
        ruff check genro_storage tests
      continue-on-error: true  # Don't fail CI on linting for now
    
    - name: Type check with mypy
      run: |
        mypy genro_storage --ignore-missing-imports
      continue-on-error: true  # Don't fail on mypy errors yet

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Build docs
      run: |
        cd docs
        make html
    
    - name: Upload docs artifact
      uses: actions/upload-artifact@v5
      with:
        name: docs-html
        path: docs/_build/html/
        retention-days: 30

  # Summary job that depends on all others
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, docs]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test result: ${{ needs.test.result }}"
        echo "Lint result: ${{ needs.lint.result }}"
        echo "Docs result: ${{ needs.docs.result }}"
        
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Tests failed!"
          exit 1
        fi
        
        # Lint and docs are allowed to fail for now (continue-on-error)
        echo "✅ All critical checks passed!"
