name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    services:
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - /tmp/minio-data:/data
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all,dev]"
    
    - name: Wait for MinIO
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
    
    - name: Run unit tests
      run: |
        pytest tests/test_local_storage.py -v --cov=genro_storage --cov-report=xml --cov-report=term
    
    - name: Run integration tests (MinIO)
      env:
        MINIO_ENDPOINT: http://localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
      run: |
        pytest tests/test_s3_integration.py -v -m integration --cov=genro_storage --cov-append --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: false  # Disabled for now - setup Codecov later
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Generate coverage report
      if: matrix.python-version == '3.12'
      run: |
        pip install coverage[toml]
        coverage report --show-missing
        coverage html
    
    - name: Upload coverage HTML
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: htmlcov/
        retention-days: 30

  lint:
    name: Lint and format check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
        pip install -e ".[all]"
    
    - name: Check code formatting with black
      run: |
        black --check --diff genro_storage tests
    
    - name: Lint with ruff
      run: |
        ruff check genro_storage tests
    
    - name: Type check with mypy
      run: |
        mypy genro_storage --ignore-missing-imports
      continue-on-error: true  # Don't fail on mypy errors yet

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Build docs
      run: |
        cd docs
        make html SPHINXOPTS="-W --keep-going"
    
    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: docs-html
        path: docs/_build/html/
        retention-days: 30

  # Summary job that depends on all others
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, docs]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Tests failed!"
          exit 1
        fi
        if [ "${{ needs.lint.result }}" != "success" ]; then
          echo "Linting failed!"
          exit 1
        fi
        if [ "${{ needs.docs.result }}" != "success" ]; then
          echo "Docs build failed!"
          exit 1
        fi
        echo "All checks passed! âœ…"
