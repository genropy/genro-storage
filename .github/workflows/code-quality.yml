name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  security:
    name: Security scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e ".[all]"
    
    - name: Run Bandit security scan
      run: |
        bandit -r genro_storage -f json -o bandit-report.json || true
        bandit -r genro_storage
      continue-on-error: true
    
    - name: Check dependencies with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  complexity:
    name: Code complexity check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install radon
    
    - name: Calculate complexity
      run: |
        echo "## Cyclomatic Complexity" > complexity-report.md
        radon cc genro_storage -a -s >> complexity-report.md
        
        echo "" >> complexity-report.md
        echo "## Maintainability Index" >> complexity-report.md
        radon mi genro_storage >> complexity-report.md
        
        cat complexity-report.md
    
    - name: Upload complexity report
      uses: actions/upload-artifact@v4
      with:
        name: complexity-report
        path: complexity-report.md

  coverage-report:
    name: Detailed coverage report
    runs-on: ubuntu-latest
    
    services:
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all,dev]"
        pip install coverage[toml]
    
    - name: Run tests with coverage
      env:
        MINIO_ENDPOINT: http://localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
      run: |
        coverage run -m pytest tests/ -v
        coverage report --show-missing
        coverage html
        coverage json
    
    - name: Generate coverage badge
      run: |
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
        echo "Coverage: $COVERAGE%"
        
        # Create badge
        COLOR="red"
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then COLOR="green"; fi
        if (( $(echo "$COVERAGE >= 60 && $COVERAGE < 80" | bc -l) )); then COLOR="yellow"; fi
        
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.json
          coverage.xml
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
